#!/usr/bin/env python3
import yt
import sys, os, argparse
from utils import CMAPS
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import AxesGrid
import numpy as np
from kinematics_pipeline.Box import Box

parser = argparse.ArgumentParser()
parser.add_argument('--field', help='Field to project along', default="density")
parser.add_argument('--grids', help="True if you want to display grid lines, False by default", default=False)
parser.add_argument('--box', help="Name of a file containing center (x, y, z) and length of box of interest in code units, comma-separated.", default=None)

args = parser.parse_args()

enzo_out_dir = os.getcwd()
field = args.field
grids = args.grids

box = Box(args.box)

# fig = plt.figure()

# grid = AxesGrid(
#     fig,
#     (0.085, 0.085, 0.9, 0.9),
#     nrows_ncols=(1, 2),
#     axes_pad=0.05,
#     label_mode="L",
#     cbar_location="top",
#     cbar_mode="none",
#     cbar_size="3%",
#     cbar_pad="0%",
#     aspect=False,
# )

yt.enable_parallelism()

ts = yt.load(enzo_out_dir + "/RD????/RD????")

last_ds = yt.load(ts.outputs[-1])

ad = last_ds.all_data()
zmin, zmax = ad.quantities.extrema(field)


storage={}
for sto, ds in ts.piter(storage=storage):

  
    ad = ds.all_data()

    L = ds.quan(box.length, "code_length")
    x0 = ds.quan(box.center[0], "code_length")
    y0 = ds.quan(box.center[1], "code_length")
    z0 = ds.quan(box.center[2], "code_length")

    x = x0 - L/2
    y = y0 - L/2
    z = z0 - L/2
    region = ds.r[x:x+L, y:y+L, z:z+L]

    bulk_velocity = region.quantities.bulk_velocity()
    region.set_field_parameter("bulk_velocity", bulk_velocity)
    region.set_field_parameter("center", yt.YTArray([x0, y0, z0]))
    
    plot_along_z = yt.ProjectionPlot(ds, 'z', field, 
        center=box.center, 
        width=L, 
        weight_field="density",
        data_source=region)
    plot_along_z.annotate_timestamp(redshift=True)
        
    #plot_along_z.set_zlim(field, zmin=zmin, zmax=zmax)
    plot_along_z.set_cmap(field, CMAPS[field])
    plot_along_z.set_axes_unit('kpc')
    plot_along_z.set_log(field, False)

    if field == "radial_velocity":
        plot_along_z.set_unit(field, 'km/s')


    # plot_along_x = yt.ProjectionPlot(ds, 'x', field, 
    #     center=box.center, 
    #     width=L, 
    #     weight_field="density",
    #     data_source=region)

    # plot_along_x.swap_axes()

    
    # plot_along_x.set_zlim(field, zmin=zmin, zmax=zmax)
    # plot_along_x.set_cmap(field, CMAPS[field])
    # plot_along_x.set_axes_unit('kpc')


    if grids:
        plot_along_z.annotate_grids()
        # plot_along_x.annotate_grids()

    

    # z_plot = plot_along_z.plots[field]
    # z_plot.figure = fig
    # z_plot.axes = grid[0].axes
    # z_plot.cax = grid.cbar_axes[0]

    # plot_along_z.render()

    # x_plot = plot_along_x.plots[field]
    # x_plot.figure = fig
    # x_plot.axes = grid[1].axes
    # x_plot.cax = grid.cbar_axes[1]

    # plot_along_x.render()

    if type(field) == tuple:
        # plt.savefig(f"{os.path.expanduser('~/analysis_scripts')}/{str(ds)}_{field[1]}.png")
        plot_along_z.save(f"{os.path.expanduser('~/analysis_scripts')}/{str(ds)}_{field[1]}.png")
    else:
        plot_along_z.save(f"{os.path.expanduser('~/analysis_scripts')}/{str(ds)}_{field}.png")
        # plt.savefig(f"{os.path.expanduser('~/analysis_scripts')}/{str(ds)}_{field}.png")
