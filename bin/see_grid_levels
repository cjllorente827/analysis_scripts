#!/usr/bin/env python3

import yt 
import os, argparse
import numpy as np
from utils import CMAPS
import matplotlib.pyplot as plt

def see_grid_levels(enzo_dataset, box_spec_file):

    box = Box(args.box)

parser = argparse.ArgumentParser()
parser.add_argument('--box', help="Name of a file containing center (x, y, z) and length of box of interest in code units, comma-separated.", default=None)
args = parser.parse_args()


enzo_out_dir = os.getcwd()
Lbox = args.Lbox

yt.enable_parallelism()

ts = yt.load(enzo_out_dir + "/RD????/RD????")

first_ds = yt.load(ts.outputs[0])
zmin, zmax = 0, first_ds.parameters['MaximumRefinementLevel']


storage={}
for sto, ds in ts.piter(storage=storage):

  
    ad = ds.all_data()

    L = ds.quan(Lbox, "code_length")
    point_5 = ds.quan(0.5, "code_length")

    x = point_5 - L/2
    y = point_5 - L/2
    z = point_5 - L/2
    region = ds.r[x:x+L, y:y+L, z:z+L]

    plot = yt.ProjectionPlot(ds, 'z', ("index", "grid_level"), 
        center=(0.5, 0.5, 0.5), 
        method="mip",
        width=L, 
        weight_field=None,
        data_source=region)
    plot.annotate_timestamp(redshift=True)
    plot.set_zlim(("index", "grid_level"), zmin=zmin, zmax=zmax)
    plot.set_log(("index", "grid_level"), log=False)
    plot.set_cmap(("index", "grid_level"), "Dark2")
    plot.save(f"temp/{str(ds)}_grid_levels.png")

if (yt.is_root()):

    start_number = int(ts.outputs[0][-4:])
    os.system("pwd")
    os.system(f'run_ffmpeg ~/analysis_code/grid_levels.mp4 temp/RD%04d_grid_levels.png {start_number}')




