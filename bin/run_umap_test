#!/opt/software/Python/3.9.5-GCCcore-10.3.0/bin/python
from analysis_scripts import *
from analysis_scripts.src.utils import getFieldData
from analysis_scripts.src.umap_analysis import (
    umap_preprocessing, 
    do_umap, 
    plot_umap_result
)

import yt, trident, os
yt.set_log_level(50)
import numpy as np
from ndustria import Pipeline



def main(enzo_dataset, box_spec_file):

    ds, box, region = getDataBoxAndRegion(enzo_dataset, box_spec_file)

    # set the center
    # Its important to set the center field parameter to a ytarray
    # in code_length units. 
    # If you don't yt will be sad :(
    center = ds.arr(box.center, "code_length") 
    region.set_field_parameter("center", box.center)

    # cut the disk out
    inner_sphere = ds.sphere(box.center, (10, "kpc"))
    outer_sphere = ds.sphere(box.center, (200, "kpc")) 

    cgm = outer_sphere - inner_sphere

    cgm_cut = cgm.cut_region("(obj['temperature'] > 1.5e4) | (obj['density'] < 2e-26)")
    # Cut regions don't use their own field_parameters for calculations
    # they use their underlying base_object parameters
    cgm_cut.base_object.set_field_parameter("center", center)

    # on my ion bullshit
    all_ion_list=[
        'H I',
        'C II','C III','C IV',
        'Si II','Si III','Si IV',
        'O I','O II','O III','O IV','O V','O VI','O VII','O VIII'
    ]

    important_ion_list = [
        'H I',
        'C IV',
        'O VI',
        'Mg II',
        'Si III'
    ]

    trident.add_ion_fields(ds, ions=important_ion_list)

    high_OVI_region = cgm_cut.cut_region("obj['O_p5_ion_fraction'] > 0.1")

    # field list for data being put into UMAP 
    fields = [
        "density",
        "temperature",
        "metallicity",
        "O_p5_ion_fraction",
        "Si_p2_ion_fraction",
        "C_p3_ion_fraction",
        "H_p0_ion_fraction",
        "Mg_p1_ion_fraction",
    ]

    raw_field_data = []
    for i, field in enumerate(fields):

        raw_field_data.append(
            getFieldData(high_OVI_region, field)
        )

    @AddTask(rerun=True)
    def quickPrint(data):
        print(f"{len(data[0])} cells found in the high OVI region.")
        return "stdout"
    quickPrint(raw_field_data)

    # this seemed to work pretty well
    n_neighbors = 32
    min_dist = 0.01

    
    
    preprocessed_data = umap_preprocessing(
        raw_field_data, 
        sub_sample_size=25000,
        random_seed=42
    )

    umap_result = do_umap(
        preprocessed_data,
        n_neighbors=n_neighbors,
        min_dist=min_dist
        )

    plot_umap_result(
        umap_result, 
        title=f"UMAP Tempest z=0" ,
        save_to=f"{getOutputDir()}/UMAP_Tempest_z0.png"
    )
    

    Pipeline.run(parallel=True)



if __name__ == "__main__":
    enzoOuts = findEnzoOuts()
    boxSpec = "Tempest_box_at_z_0.csv"
    main(enzoOuts, boxSpec)