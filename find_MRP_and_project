#!/opt/software/Python/3.9.5-GCCcore-10.3.0/bin/python
import yt
import sys, os, argparse

from utils import CMAPS

parser = argparse.ArgumentParser()
parser.add_argument('--field', help='Field to project along', default="density")
parser.add_argument('--Lbox', help='Length of the box in code units', default=0.04) # 1 Mpccm/h in a 25 Mpccm/h box
args = parser.parse_args()

enzo_out_dir = os.getcwd()
field = args.field
Lbox = args.Lbox

@yt.particle_filter(requires=["particle_type"], filtered_type="all")
def MustRefineParticle(pfilter, data):
    return data[(pfilter.filtered_type, "particle_type")] == 4

yt.enable_parallelism()

ts = yt.load(enzo_out_dir + "/DD????/DD????")

last_ds = yt.load(ts.outputs[-1])

ad = last_ds.all_data()
zmin, zmax = ad.quantities.extrema(field)


storage={}
for sto, ds in ts.piter(storage=storage):

    ds.add_particle_filter("MustRefineParticle")
    ad = ds.all_data()

    com = ad.quantities.center_of_mass(
        use_gas=False, 
        use_particles=True, 
        particle_type="MustRefineParticle")

    # multiplying by 1.1 gives some extra padding that eliminates dead zones at the edge of the image
    L = 1.1*ds.quan(Lbox, "code_length")

    x = com[0] - L/2
    y = com[1] - L/2
    z = com[2] - L/2
    region = ds.r[x:x+L, y:y+L, z:z+L]

    plot = yt.ProjectionPlot(ds, 'z', field, 
        center=com, 
        width=L, 
        weight_field="density",
        data_source=region)
    plot.annotate_timestamp(redshift=True)
    plot.set_zlim(field, zmin=zmin, zmax=zmax)
    plot.set_cmap(field, CMAPS[field])
    plot.save(f"temp/{str(ds)}_{field}.png")

if (yt.is_root()):

    start_number = int(ts.outputs[0][-4:])
    os.system("pwd")
    os.system(f'run_ffmpeg ~/analysis_code/{field}_projection.mp4 temp/DD%04d_{field}.png {start_number}')




