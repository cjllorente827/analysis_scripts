#!/opt/software/Python/3.9.5-GCCcore-10.3.0/bin/python
import yt
import sys, os, argparse
from utils import CMAPS
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import AxesGrid
fig = plt.figure()

grid = AxesGrid(
    fig,
    (0.085, 0.085, 0.9, 0.9),
    nrows_ncols=(1, 2),
    axes_pad=0.05,
    label_mode="L",
    cbar_location="top",
    cbar_mode="none",
    cbar_size="3%",
    cbar_pad="0%",
    aspect=False,
)

parser = argparse.ArgumentParser()
parser.add_argument('--field', help='Field to project along', default="density")
parser.add_argument('--Lbox', help='Length of the box in code units', default=1.0, type=float) # Do entire box
parser.add_argument('--grids', help="True if you want to display grid lines, False by default", default=False)
args = parser.parse_args()

enzo_out_dir = os.getcwd()
field = args.field
Lbox = args.Lbox
grids = args.grids

yt.enable_parallelism()

ts = yt.load(enzo_out_dir + "/DD????/DD????")

last_ds = yt.load(ts.outputs[-1])

ad = last_ds.all_data()
zmin, zmax = ad.quantities.extrema(field)


storage={}
for sto, ds in ts.piter(storage=storage):

  
    ad = ds.all_data()

    L = ds.quan(Lbox, "code_length")
    point_5 = ds.quan(0.5, "code_length")

    x = point_5 - L/2
    y = point_5 - L/2
    z = point_5 - L/2
    region = ds.r[x:x+L, y:y+L, z:z+L]

    
    plot_along_z = yt.ProjectionPlot(ds, 'z', field, 
        center=(0.5, 0.5, 0.5), 
        width=L, 
        weight_field="density",
        data_source=region)
    plot_along_z.annotate_timestamp(redshift=True)
        
    plot_along_z.set_zlim(field, zmin=zmin, zmax=zmax)
    plot_along_z.set_cmap(field, CMAPS[field])

    plot_along_x = yt.ProjectionPlot(ds, 'x', field, 
        center=(0.5, 0.5, 0.5), 
        width=L, 
        weight_field="density",
        data_source=region)

    plot_along_x.swap_axes()

    
    plot_along_x.set_zlim(field, zmin=zmin, zmax=zmax)
    plot_along_x.set_cmap(field, CMAPS[field])

    if grids:
        plot_along_z.annotate_grids()
        plot_along_x.annotate_grids()
    # plot.save(f"temp/{str(ds)}_{field}.png")

    

    z_plot = plot_along_z.plots[field]
    z_plot.figure = fig
    z_plot.axes = grid[0].axes
    z_plot.cax = grid.cbar_axes[0]

    plot_along_z.render()

    x_plot = plot_along_x.plots[field]
    x_plot.figure = fig
    x_plot.axes = grid[1].axes
    x_plot.cax = grid.cbar_axes[1]

    plot_along_x.render()

    plt.savefig(f"temp/{str(ds)}_{field}.png")

    


if (yt.is_root()):

    start_number = int(ts.outputs[0][-4:])
    os.system("pwd")
    os.system(f'run_ffmpeg ~/analysis_code/{field}_projection.mp4 temp/DD%04d_{field}.png {start_number}')




