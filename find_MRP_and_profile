#!/opt/software/Python/3.9.5-GCCcore-10.3.0/bin/python
import yt
import sys, os, argparse

from utils import CMAPS

parser = argparse.ArgumentParser()
parser.add_argument('--field', help='Field to profile', default="entropy")
parser.add_argument('--radius', help='Radius in code units', default=0.02) # 0.5 Mpccm/h in a 25 Mpccm/h box
args = parser.parse_args()

enzo_out_dir = os.getcwd()
field = args.field
rad = args.radius

@yt.particle_filter(requires=["particle_type"], filtered_type="all")
def MustRefineParticle(pfilter, data):
    return data[(pfilter.filtered_type, "particle_type")] == 4

yt.enable_parallelism()

ts = yt.load(enzo_out_dir + "/DD????/DD????")


storage={}
for sto, ds in ts.piter(storage=storage):

    ds.add_particle_filter("MustRefineParticle")
    ad = ds.all_data()

    com = ad.quantities.center_of_mass(
        use_gas=False, 
        use_particles=True, 
        particle_type="MustRefineParticle")

    # multiplying by 1.1 gives some extra padding that eliminates dead zones at the edge of the image
    R = 1.1*ds.quan(rad, "code_length")

    region = ds.sphere(com, R)

    plot = yt.ProfilePlot(
        region, 
        ("index", "radius"),
        field
    )
    plot.set_unit(("index", "radius"), "kpc")
    plot.save(f"temp/{str(ds)}_{field}_profile.png")

if (yt.is_root()):

    start_number = int(ts.outputs[0][-4:])
    os.system("pwd")
    os.system(f'run_ffmpeg ~/analysis_code/{field}_profile.mp4 temp/DD%04d_{field}_profile.png {start_number}')




